name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  RUN_ID: build.${{ GITHUB.RUN_ID }}
  RUN_NUMBER: build.${{ GITHUB.RUN_NUMBER }}
  SHA: ${{ GITHUB.SHA }}
  MYGET_API_TOKEN: ${{ SECRETS.MYGET_API_TOKEN }}
  GITHUB_TOKEN: ${{ SECRETS.GITHUB_TOKEN }}

jobs:

  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Git fetch tags
      run: git fetch --tags

    - name: Check tags
      run: git tag -l -n

    - name: Setup dotnet 3.1.x sdk
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1

    - name: Setup dotnet 5.0.x sdk
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100-preview.8.20417.9

    - name: Setup side by side .NET SDKs
      shell: pwsh
      run: |
          $version = Split-Path (Split-Path $ENV:DOTNET_ROOT -Parent) -Leaf;
          echo "Version is: ${version}.";
          $root = Split-Path (Split-Path $ENV:DOTNET_ROOT -Parent) -Parent;
          echo "Root is: ${root}.";
          $directories = Get-ChildItem $root | Where-Object { $_.Name -ne $version };

          foreach ($dir in $directories)
          {
              $from = $dir.FullName;
              $to = "$root\$version";
              echo "Copying from ${from} to ${to}.";
              Copy-Item "$from\*" $to -Recurse -Force;
          }

    - name: Check dotnet sdk install
      run: dotnet --info

    - name: Install dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build -c Release --no-restore

    - name: Test solution
      run: dotnet test -c Release --no-build --no-restore --verbosity normal

    - name: Pack packages
      run: |
        $LastTag =git describe --tags (git rev-list --tags --max-count=1)
        echo "Last tag is: ${LastTag}"
        $Version = ($LastTag).TrimStart('v').TrimEnd("beta").TrimEnd("preview")
        echo "Publishing version: ${Version}"
        $PackageVersion = ($LastTag).TrimStart('v') + "-" + $env:RUN_NUMBER + "." + $env:SHA.SubString(0, 7)
        echo "Publishing package version: ${PackageVersion}"
        dotnet pack -c Release -o packages /p:PackageVersion=$PackageVersion /p:Version=$Version --no-build

    - name: Publish artefacts
      uses: actions/upload-artifact@v1.0.0
      with:
        name: "drop-ci-packages"
        path: './packages'

  release-build-version:
    runs-on: windows-latest
    needs: build
    if: github.repository_owner == 'casbin-net' && github.ref == 'refs/heads/master'
    steps:
      - name: Download Artefact
        uses: actions/download-artifact@v1
        with:
          name: 'drop-ci-packages'

      - name: Add myget nuget source
        run: dotnet nuget add source https://www.myget.org/F/casbin-net/api/v2/package --name myget.org

      - name: Push myget package
        run: dotnet nuget push .\drop-ci-packages\*.nupkg -s myget.org -k $env:MYGET_API_TOKEN --skip-duplicate

      - name: Add github nuget source
        run: dotnet nuget add source https://nuget.pkg.github.com/casbin-net/index.json --name github.com --username casbin-net --password $env:GITHUB_TOKEN

      - name: Push github package
        run: |
          $count = 0;

          do
          {
              ++$count;
              dotnet nuget push .\drop-ci-packages\*.nupkg -s github.com --skip-duplicate;
          }
          while ($count -lt 3 -and $LastExitCode -ne 0)

          if($LastExitCode -ne 0)
          {
              Write-Warning -Message "Can not push the package to github packages, laat exit code is ${LastExitCode}."
              $LastExitCode = 0;
          }
